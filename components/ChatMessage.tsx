import React from 'react';
import { Message, Sender, DeploymentStatus } from '../types';

interface ChatMessageProps {
  message: Message;
}

const UserAvatar: React.FC = () => (
  <div className="w-8 h-8 rounded-full bg-light-blue-600 flex items-center justify-center font-bold text-white flex-shrink-0">
    K
  </div>
);

const AiAvatar: React.FC = () => (
  <div className="w-8 h-8 rounded-full bg-deep-purple-600 flex items-center justify-center font-bold text-white flex-shrink-0">
    A
  </div>
);

const ChatBubble: React.FC<{ sender: Sender; children: React.ReactNode }> = ({ sender, children }) => {
  const bgColor = sender === 'ai' ? 'bg-gray-800' : 'bg-blue-900/60';
  return (
    <div className={`px-4 py-3 rounded-2xl ${bgColor} max-w-lg lg:max-w-xl xl:max-w-2xl`}>
      {children}
    </div>
  );
};

const DeploymentStatusIndicator: React.FC<{ status: DeploymentStatus; text: string; url?: string }> = ({ status, text, url }) => {
  const getIcon = () => {
    switch (status) {
      case 'success':
        return <i className="fas fa-check-circle text-green-400"></i>;
      case 'error':
        return <i className="fas fa-times-circle text-red-400"></i>;
      default:
        return <i className="fas fa-spinner fa-spin text-deep-purple-400"></i>;
    }
  };

  return (
    <div className="p-2">
      <div className="flex items-center gap-3 mb-3">
        {getIcon()}
        <span className="font-semibold text-gray-300">{text}</span>
      </div>
      {status === 'success' && url && (
        <div className="mt-2 pt-2 border-t border-gray-700/50">
           <a
            href={url}
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center gap-2 bg-green-600/80 hover:bg-green-500 text-white font-bold py-2 px-4 rounded-lg transition-colors"
            >
            <i className="fas fa-external-link-alt"></i>
            View Live Application
            </a>
        </div>
      )}
    </div>
  )

}


const ChatMessage: React.FC<ChatMessageProps> = ({ message }) => {
  const isAI = message.sender === 'ai';

  const renderContent = () => {
    switch (message.type) {
      case 'image':
        return (
          <>
            <p className="text-gray-200 mb-2">{message.text}</p>
            <img src={message.imageUrl} alt="Generated by Alfreyaa" className="rounded-lg w-64 h-64 object-cover" />
          </>
        );
      case 'error':
        return <p className="text-red-400">{message.text}</p>;
      case 'deployment':
        return <DeploymentStatusIndicator status={message.deploymentStatus!} text={message.text} url={message.deploymentUrl} />;
      case 'code_modification':
          return (
            <div>
              <div className="flex items-center gap-3 mb-3">
                <i className="fas fa-code-merge text-deep-purple-400"></i>
                <h4 className="font-semibold text-gray-300">Executing Self-Modification</h4>
              </div>
              <p className="text-gray-200 whitespace-pre-wrap mb-3">{message.codeModification?.explanation || message.text}</p>
              {message.codeModification && message.codeModification.changes.length > 0 && (
                 <div className="mt-2 pt-2 border-t border-gray-700/50">
                    <h5 className="text-xs font-semibold text-gray-400 mb-2 uppercase tracking-wider">Affected Files</h5>
                    <ul className="space-y-1">
                        {message.codeModification.changes.map((change, index) => (
                            <li key={index} className="text-sm text-gray-400 font-mono" title={change.reason}>
                                <i className="fas fa-file-alt mr-2 text-gray-500"></i>
                                {change.file}
                            </li>
                        ))}
                    </ul>
                 </div>
              )}
            </div>
          );
      case 'website_analysis':
        return (
          <>
            <p className="text-gray-200 whitespace-pre-wrap">{message.text}</p>
            {message.analyzedUrl && (
              <div className="mt-4 pt-3 border-t border-gray-700/50">
                <h4 className="text-xs font-semibold text-gray-400 mb-2 uppercase tracking-wider">Analyzed Source</h4>
                 <div className="flex items-start gap-2">
                    <i className="fas fa-globe text-gray-500 mt-1 flex-shrink-0"></i>
                    <a
                        href={message.analyzedUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-light-blue-400 hover:text-light-blue-300 hover:underline text-sm break-all"
                        title={message.analyzedUrl}
                    >
                        {message.analyzedUrl}
                    </a>
                 </div>
              </div>
            )}
          </>
        );
      case 'grounded_text':
        return (
          <>
            <p className="text-gray-200 whitespace-pre-wrap">{message.text}</p>
            {message.sources && message.sources.length > 0 && (
              <div className="mt-4 pt-3 border-t border-gray-700/50">
                <h4 className="text-xs font-semibold text-gray-400 mb-2 uppercase tracking-wider">Sources</h4>
                <ul className="space-y-2">
                  {message.sources.map((source, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <i className="fas fa-link text-gray-500 mt-1 flex-shrink-0"></i>
                      <a
                        href={source.uri}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-light-blue-400 hover:text-light-blue-300 hover:underline text-sm"
                        title={source.title}
                      >
                        {source.title}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </>
        );
      case 'text':
      default:
        return <p className="text-gray-200 whitespace-pre-wrap">{message.text}</p>;
    }
  };

  return (
    <div className={`flex items-start gap-3 my-4 ${isAI ? 'justify-start' : 'justify-end'}`}>
      {isAI && <AiAvatar />}
      <div className={`flex flex-col ${isAI ? 'items-start' : 'items-end'}`}>
        <span className={`text-sm font-bold mb-1 ${isAI ? 'text-deep-purple-400' : 'text-light-blue-400'}`}>
          {isAI ? 'Alfreyaa' : 'Kaarthi'}
        </span>
        <ChatBubble sender={message.sender}>
          {renderContent()}
        </ChatBubble>
      </div>
      {!isAI && <UserAvatar />}
    </div>
  );
};

export default ChatMessage;